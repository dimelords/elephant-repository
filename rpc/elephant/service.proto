syntax = "proto3";

package elephant.repository;

option go_package = "./rpc/elephant";

service Documents {
  rpc Get(GetDocumentRequest) returns (GetDocumentResponse);
  rpc GetHistory(GetHistoryRequest) returns (GetHistoryResponse);
  rpc Update(UpdateRequest) returns (UpdateResponse);
  rpc Delete(DeleteDocumentRequest) returns (DeleteDocumentResponse);
  rpc GetMeta(GetMetaRequest) returns (GetMetaResponse);
  rpc UpdatePermissions(UpdatePermissionsRequest) returns (UpdatePermissionsResponse);
}

message GetDocumentRequest {
  // UUID of the document to get.
  string uuid = 1;
  // Version to get, omit to get latest (or use status).
  int64 version = 2;
  // Status is used to fetch the version of the document references by the last
  // status update. Can be used instead of specifying a version.
  string status = 3;
  // Lock will lock the document for updates. This only affects the creation of
  // new versions of the document statuses can still be updated.
  bool lock = 4;
}

message GetDocumentResponse {
  Document document = 1;
  int64 version = 2;
}

message GetHistoryRequest {
  // UUID of the document to get the history for.
  string uuid = 1;
  // Before is which version number we should start fetching history from, omit
  // to start with the latest version.
  int64 before = 2;
}

message GetHistoryResponse {
  repeated DocumentVersion versions = 1;
}

message DocumentVersion {
  // Version of the document.
  int64 version = 1;
  // Created timestamp is the RFC3339 timestamp for when the version was
  // created.
  string created = 2;
  // Creator of the version.
  IdentityReference creator = 3;
  // Meta data to for the document version.
  repeated MetaValue meta = 4;
}

// UpdateReques creates a new document version and/or sets statuses for a
// document. The update is transactional will fail or succed as a whole.
message UpdateRequest {
  // UUID of the document to update.
  string uuid = 1;
  // Document version to create.
  Document document = 2;
  // Meta data to associate with the document version.
  repeated MetaValue meta = 3;
  // IfMatch is used for optimistic locks. Set to the version that you require
  // to be the current one for the update to be performed, or -1 to only perform
  // the update if the document doesn't already exist.
  int64 ifMatch = 4;
  // Status updates to perform.
  repeated StatusUpdate status  = 5;
}

message UpdateResponse {
  // TODO
}

message StatusUpdate {
  // Name of the status to set.
  string name = 1;
  // Version to set the status for. Set to -1 to signal that the status no
  // longer is valid for the document. Optional if part of a document update
  // request as it then will default to the version being written.
  int64 version = 2;
  // Meta data to include with the status update.
  repeated MetaValue meta = 3;
  // IfMatch is used for optimistic locks. Set to the status id that you require
  // to be the current one for the status to be set, or -1 to only perform the
  // update if the status hasn't previously been set.
  int64 ifMatch = 4;
}

// MetaValue is a key value pair used to set metadata for document versions and
// statuses.
message MetaValue {
  string key = 1;
  string value = 2;
}

message UpdatePermissionsRequest {
  // Set (upsert based on URI) this list of ACL entries. 
  repeated ACLEntry set = 1;
  // Drop ACL entries with the specified URIs 
  repeated string drop = 2;
}

message UpdatePermissionsResponse {}

message DeleteDocumentRequest {
  // UUID of the document to delete.
  string uuid = 1;
  // IfMatch is used for optimistic locks. Set to the version that you require
  // to be the current one for the delete to be performed.
  int64 ifMatch = 2;
}

message DeleteDocumentResponse {}

message GetMetaRequest {
  // UUID of the document to get metadata for
  string uuid = 1;
}

message GetMetaResponse {
  DocumentMeta meta = 1;  
}

message DocumentMeta {
  // Created timestamp is the RFC3339 timestamp for when the document was
  // created.
  string created = 1;
  // Modified timestamp is the RFC3339 timestamp for the last change that
  // affected the document.
  string modified = 2;
  // CurrentVersion is the last written vrsion of the document.
  int64 currentVersion = 3;
  // Heads are the last statuses.
  map<string, Status> heads = 4;
  // ACL is an ACL list controlling access to the document.
  repeated ACLEntry ALC = 5;
}

message Status {
  // ID of the status.
  int64 id = 1;
  // Version of the document that the status refers to.
  int64 version = 2;
  // Creator of the status.
  IdentityReference creator = 3;
  // Created timestamp is the RFC3339 timestamp for when the statue was created.
  string created = 4;
  // Meta data for the status.
  repeated MetaValue meta = 5;
}

message ACLEntry {
  // URI that identifies the party that's granted access.
  string uri = 1;
  // Name of the grantee.
  string name = 2;
  // Permissions given to the grantee.
  repeated string permissions = 3;
}

message IdentityReference {
  // URI that identifies the entity.
  string uri = 1;
  // Name of the entity.
  string name = 2;
}

// Document is the content
message Document {
  // UUID is a unique ID for the document, this can be a random v4
  // UUID, or a URI-derived v5 UUID.
  string uuid = 1;
  // Type is the content type of the document.
  string type = 2;
  // URI identifies the document (in a more human-readable way than
  // the UUID)
  string uri = 3;
  // URL is the browseable location of the document (if any)
  string url = 4;
  // Title is the title of the document, often used as the headline
  // when the document is displayed.
  string title = 5;
  // Content is the content of the documen, this is essentially what
  // gets rendered on the page when you view a document.
  repeated Block content = 6;
  // Meta is the metadata for a document, this could be stuff like
  // open graph tags and content profile information.
  repeated Block meta = 7;
  // Links are links to other resources and entities. This could be
  // links to categories and subject for the document, or authors.
  repeated Block links = 8;
  // Language is the language used in the document as an IETF language
  // tag. F.ex. "en", "en-UK", "es", or "sv-SE".
  string language = 9;
}

// Block is the building block for data embedded in documents. It is
// used for both content, links and metadata. Blocks have can be
// nested, but that's nothing to strive for, keep it simple.
message Block {
  // ID is the block ID
  string id = 1;
  // UUID is used to reference another Document in a block.
  string uuid = 2;
  // URI is used to reference another entity in a document.
  string uri = 3;
  // URL is a browseable URL for the the block.
  string url = 4;
  // Type is the type of the block
  string type = 5;
  // Title is the title/headline of the block, typically used in the
  // presentation of the block.
  string title = 6;
  // Data contains block data
  map<string, string> data = 7;
  // Relationship describes the relationship to the document/parent
  // entity
  string rel = 8;
  // Role is used for nuancing and qualifying relationships.
  string role = 9;
  // Name is a name for the block. An alternative to "rel" when
  // relationship is a term that doesn't fit.
  string name = 10;
  // Value is a value for the block. Useful when we want to store a
  // primitive value.
  string value = 11;
  // ContentType is used to describe the content type of the
  // block/linked entity if it differs from the type of the block.
  string contentType = 12;
  // Links are used to link to other resources and documents.
  repeated Block links = 13;
  // Content is used to embed content blocks.
  repeated Block content = 14;
  // Meta is used to embed metadata
  repeated Block meta = 15;
}
